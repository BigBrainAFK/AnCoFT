@model AnCoFT.Dashboard.Models.CharacterEdit;
@{
	string colorMode = Context.Request.Cookies["ColorMode"] != null && Context.Request.Cookies["ColorMode"] == "DarkMode" ? "dark" : "light";
	string textColor = Context.Request.Cookies["ColorMode"] != null && Context.Request.Cookies["ColorMode"] == "DarkMode" ? "light" : "dark";
}

@{
	ViewData["Title"] = "Dashboard - Editing Character";
}

	<div class="container">
		<h2 class="subtitle @("has-text-" + textColor)">
			Character - #@(Model.CharacterId)
		</h2>
		@Html.AntiForgeryToken()
		@using (Html.BeginForm("EditCharacter", "Account", FormMethod.Post, new { @class = "is-fullwidth" }))
		{
			@Html.HiddenFor(c => c.CharacterId);
			@Html.HiddenFor(c => c.Hash);
			<div class="field is-horizontal">
				<div class="field-body">
					<div class="control has-icons-left has-icons-right">
						@Html.TextBoxFor(c => c.Name, new { @class = "input is-rounded has-background-" + colorMode + " has-text-" + textColor, @placeholder = "Charactername" })
						<span class="icon is-small is-left">
							<i class="fas fa-user"></i>
						</span>
						<span class="icon is-small is-right valid-icon" style="display: none;">
							<i class="fas fa-check"></i>
						</span>
						<span class="icon is-small is-right invalid-icon" style="display: none;">
							<i class="fas fa-exclamation-triangle"></i>
						</span>
						<p>@Html.ValidationMessageFor(c => c.Name, "", new { @class = "help is-danger" })</p>
					</div>
					<div class="field is-hidden-mobile"></div>
					<div class="control">
						@Html.CheckBoxFor(c => c.NameChangeAllowed, new { @class = "checkbox has-background-" + colorMode + " has-text-" + textColor })
						@Html.LabelFor(c => c.NameChangeAllowed, new { @class = "checkbox has-background-" + colorMode + " has-text-" + textColor }))
						<p>@Html.ValidationMessageFor(c => c.NameChangeAllowed, "", new { @class = "help is-danger" })</p>
					</div>
					<div class="field is-hidden-mobile"></div>
					<div class="field is-hidden-mobile"></div>
					<div class="field is-hidden-mobile"></div>
					<div class="field is-hidden-mobile"></div>
				</div>
			</div>
			<br />
			<div class="field is-horizontal">
				<div class="field-body">
					<div class="field">
						@Html.LabelFor(c => c.Level, new { @class = "has-text-" + textColor })
						<div class="control has-icons-left has-icons-right">
							@Html.TextBoxFor(c => c.Level, new { @class = "input is-rounded has-background-" + colorMode + " has-text-" + textColor, @placeholder = "Gold" })
							<span class="icon is-small is-left">
								<i class="fas fa-level-up-alt"></i>
							</span>
							<span class="icon is-small is-right valid-icon" style="display: none;">
								<i class="fas fa-check"></i>
							</span>
							<span class="icon is-small is-right invalid-icon" style="display: none;">
								<i class="fas fa-exclamation-triangle"></i>
							</span>
						</div>
						<p>@Html.ValidationMessageFor(c => c.Level, "", new { @class = "help is-danger" })</p>
					</div>
					<div class="field">
						@Html.LabelFor(c => c.Exp, new { @class = "has-text-" + textColor })
						<div class="control has-icons-left has-icons-right">
							@Html.TextBoxFor(c => c.Exp, new { @class = "input is-rounded has-background-" + colorMode + " has-text-" + textColor, @placeholder = "Max Inventory Space" })
							<span class="icon is-small is-left">
								<i class="fas fa-battery-quarter"></i>
							</span>
							<span class="icon is-small is-right valid-icon" style="display: none;">
								<i class="fas fa-check"></i>
							</span>
							<span class="icon is-small is-right invalid-icon" style="display: none;">
								<i class="fas fa-exclamation-triangle"></i>
							</span>
						</div>
						<p>@Html.ValidationMessageFor(c => c.Exp, "", new { @class = "help is-danger" })</p>
					</div>
				</div>
			</div>
			<br />
			<div class="field is-horizontal">
				<div class="field-body">
					<div class="field">
						@Html.LabelFor(c => c.Gold, new { @class = "has-text-" + textColor })
						<div class="control has-icons-left has-icons-right">
							@Html.TextBoxFor(c => c.Gold, new { @class = "input is-rounded has-background-" + colorMode + " has-text-" + textColor, @placeholder = "Gold" })
							<span class="icon is-small is-left">
								<i class="fas fa-coins"></i>
							</span>
							<span class="icon is-small is-right valid-icon" style="display: none;">
								<i class="fas fa-check"></i>
							</span>
							<span class="icon is-small is-right invalid-icon" style="display: none;">
								<i class="fas fa-exclamation-triangle"></i>
							</span>
						</div>
						<p>@Html.ValidationMessageFor(c => c.Gold, "", new { @class = "help is-danger" })</p>
					</div>
					<div class="field">
						@Html.LabelFor(c => c.MaxInventoryCount, new { @class = "has-text-" + textColor })
						<div class="control has-icons-left has-icons-right">
							@Html.TextBoxFor(c => c.MaxInventoryCount, new { @class = "input is-rounded has-background-" + colorMode + " has-text-" + textColor, @placeholder = "Max Inventory Space" })
							<span class="icon is-small is-left">
								<i class="fas fa-boxes"></i>
							</span>
							<span class="icon is-small is-right valid-icon" style="display: none;">
								<i class="fas fa-check"></i>
							</span>
							<span class="icon is-small is-right invalid-icon" style="display: none;">
								<i class="fas fa-exclamation-triangle"></i>
							</span>
						</div>
						<p>@Html.ValidationMessageFor(c => c.MaxInventoryCount, "", new { @class = "help is-danger" })</p>
					</div>
				</div>
			</div>
			<br />
			<div class="field is-horizontal">
				<div class="field-body">
					<div class="field">
						@Html.LabelFor(c => c.Strength, new { @class = "has-text-" + textColor })
						<div class="control has-icons-left has-icons-right">
							@Html.TextBoxFor(c => c.Strength, new { @class = "input is-rounded has-background-" + colorMode + " has-text-" + textColor, @placeholder = "Strength" })
							<span class="icon is-small is-left">
								<i class="fas fa-dumbbell"></i>
							</span>
							<span class="icon is-small is-right valid-icon" style="display: none;">
								<i class="fas fa-check"></i>
							</span>
							<span class="icon is-small is-right invalid-icon" style="display: none;">
								<i class="fas fa-exclamation-triangle"></i>
							</span>
						</div>
						<p>@Html.ValidationMessageFor(c => c.Strength, "", new { @class = "help is-danger" })</p>
					</div>
					<div class="field">
						@Html.LabelFor(c => c.Stamina, new { @class = "has-text-" + textColor })
						<div class="control has-icons-left has-icons-right">
							@Html.TextBoxFor(c => c.Stamina, new { @class = "input is-rounded has-background-" + colorMode + " has-text-" + textColor, @placeholder = "Stamina" })
							<span class="icon is-small is-left">
								<i class="fas fa-running"></i>
							</span>
							<span class="icon is-small is-right valid-icon" style="display: none;">
								<i class="fas fa-check"></i>
							</span>
							<span class="icon is-small is-right invalid-icon" style="display: none;">
								<i class="fas fa-exclamation-triangle"></i>
							</span>
						</div>
						<p>@Html.ValidationMessageFor(c => c.Stamina, "", new { @class = "help is-danger" })</p>
					</div>
				</div>
			</div>
			<div class="field is-horizontal">
				<div class="field-body">
					<div class="field">
						@Html.LabelFor(c => c.Dexterity, new { @class = "has-text-" + textColor })
						<div class="control has-icons-left has-icons-right">
							@Html.TextBoxFor(c => c.Dexterity, new { @class = "input is-rounded has-background-" + colorMode + " has-text-" + textColor, @placeholder = "Stamina" })
							<span class="icon is-small is-left">
								<i class="fas fa-hand-sparkles"></i>
							</span>
							<span class="icon is-small is-right valid-icon" style="display: none;">
								<i class="fas fa-check"></i>
							</span>
							<span class="icon is-small is-right invalid-icon" style="display: none;">
								<i class="fas fa-exclamation-triangle"></i>
							</span>
						</div>
						<p>@Html.ValidationMessageFor(c => c.Dexterity, "", new { @class = "help is-danger" })</p>
					</div>
					<div class="field">
						@Html.LabelFor(c => c.Willpower, new { @class = "has-text-" + textColor })
						<div class="control has-icons-left has-icons-right">
							@Html.TextBoxFor(c => c.Willpower, new { @class = "input is-rounded has-background-" + colorMode + " has-text-" + textColor, @placeholder = "Willpower" })
							<span class="icon is-small is-left">
								<i class="fas fa-brain"></i>
							</span>
							<span class="icon is-small is-right valid-icon" style="display: none;">
								<i class="fas fa-check"></i>
							</span>
							<span class="icon is-small is-right invalid-icon" style="display: none;">
								<i class="fas fa-exclamation-triangle"></i>
							</span>
						</div>
						<p>@Html.ValidationMessageFor(c => c.Willpower, "", new { @class = "help is-danger" })</p>
					</div>
				</div>
			</div>
			<div class="field is-horizontal">
				<div class="field-body">
					<div class="field is-hidden-mobile"></div>
					<div class="field">
						@Html.LabelFor(c => c.StatusPoints, new { @class = "has-text-" + textColor })
						<div class="control has-icons-left has-icons-right">
							@Html.TextBoxFor(c => c.StatusPoints, new { @class = "input is-rounded has-background-" + colorMode + " has-text-" + textColor, @placeholder = "Willpower" })
							<span class="icon is-small is-left">
								<i class="fas fa-dice"></i>
							</span>
							<span class="icon is-small is-right valid-icon" style="display: none;">
								<i class="fas fa-check"></i>
							</span>
							<span class="icon is-small is-right invalid-icon" style="display: none;">
								<i class="fas fa-exclamation-triangle"></i>
							</span>
						</div>
						<p>@Html.ValidationMessageFor(c => c.StatusPoints, "", new { @class = "help is-danger" })</p>
					</div>
					<div class="field is-hidden-mobile"></div>
				</div>
			</div>
			<br />
			<div class="field is-horizontal">
				<div class="field-body">
					<div class="field">
						@Html.LabelFor(c => c.BattlesWon, new { @class = "has-text-" + textColor })
						<div class="control has-icons-left has-icons-right">
							@Html.TextBoxFor(c => c.BattlesWon, new { @class = "input is-rounded has-background-" + colorMode + " has-text-" + textColor, @placeholder = "Battles won" })
							<span class="icon is-small is-left">
								<i class="fas fa-trophy"></i>
							</span>
							<span class="icon is-small is-right valid-icon" style="display: none;">
								<i class="fas fa-check"></i>
							</span>
							<span class="icon is-small is-right invalid-icon" style="display: none;">
								<i class="fas fa-exclamation-triangle"></i>
							</span>
						</div>
						<p>@Html.ValidationMessageFor(c => c.BattlesWon, "", new { @class = "help is-danger" })</p>
					</div>
					<div class="field">
						@Html.LabelFor(c => c.BattlesLost, new { @class = "has-text-" + textColor })
						<div class="control has-icons-left has-icons-right">
							@Html.TextBoxFor(c => c.BattlesLost, new { @class = "input is-rounded has-background-" + colorMode + " has-text-" + textColor, @placeholder = "Battles lost" })
							<span class="icon is-small is-left fa-stack">
								<i class="fas fa-trophy fa-stack-1x"></i>
								<i class="fas fa-ban fa-stack-2x"></i>
							</span>
							<span class="icon is-small is-right valid-icon" style="display: none;">
								<i class="fas fa-check"></i>
							</span>
							<span class="icon is-small is-right invalid-icon" style="display: none;">
								<i class="fas fa-exclamation-triangle"></i>
							</span>
						</div>
						<p>@Html.ValidationMessageFor(c => c.BattlesLost, "", new { @class = "help is-danger" })</p>
					</div>
				</div>
			</div>

			<p>@Html.ValidationMessageFor(c => c.CharacterId, "", new { @class = "help is-danger" }))</p>
			<p class="help is-danger">@ViewBag.message</p>

			<p class="control">
				<input type="submit" value="Save" class="button is-link" />
			</p>
		}
	</div>
