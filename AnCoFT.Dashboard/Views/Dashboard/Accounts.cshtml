@model AnCoFT.Dashboard.Models.AccountsModel;
@using AnCoFT.Database.Models;
@{
	string colorMode = Context.Request.Cookies["ColorMode"] != null && Context.Request.Cookies["ColorMode"] == "DarkMode" ? "dark" : "light";
	string textColor = Context.Request.Cookies["ColorMode"] != null && Context.Request.Cookies["ColorMode"] == "DarkMode" ? "light" : "dark";
}

@{
	ViewData["Title"] = "Dashboard - Accounts";
}

<div class="container">
	<form asp-area="" asp-controller="Dashboard" asp-action="Accounts" method="get">
		<div class="field has-addons">
			<div class="control is-expanded">
				<input class="input has-background-@(colorMode) has-text-@(textColor)" type="text" name="SearchString" placeholder="Accountname to search for" value="@Model.CurrentFilter" />
			</div>
			<div class="control">
				<input class="button is-info" type="submit" value="Search" />
			</div>
			<div class="control">
				<a class="button is-info" type="submit" asp-area="" asp-controller="Dashboard" asp-action="Accounts">
					<span class='icon'>
						<i class='fas fa-redo'></i>
					</span>
				</a>
			</div>
		</div>
	</form>
	<br />
	<table class="table is-narrow is-left is-fullwidth @("has-background-" + colorMode + " has-text-" + textColor)">
		<thead>
			<tr>
				<th>
					<a class="has-text-@(textColor)" asp-area="" asp-controller="Dashboard" asp-action="Accounts" asp-route-sortOrder="@Model.AccountIdSort"
					   asp-route-currentFilter="@Model.CurrentFilter">
						@Html.DisplayNameFor(model => model.Accounts[0].AccountId)
					</a>
				</th>
				<th>
					<a class="has-text-@(textColor)" asp-area="" asp-controller="Dashboard" asp-action="Accounts" asp-route-sortOrder="@Model.NameSort"
					   asp-route-currentFilter="@Model.CurrentFilter">
						@Html.DisplayNameFor(model => model.Accounts[0].Username)
					</a>
				</th>
				<th>
					<a class="has-text-@(textColor)" asp-area="" asp-controller="Dashboard" asp-action="Accounts" asp-route-sortOrder="@Model.ApSort"
					   asp-route-currentFilter="@Model.CurrentFilter">
						@Html.DisplayNameFor(model => model.Accounts[0].Ap)
					</a>
				</th>
				<th>
					<a class="has-text-@(textColor)" asp-area="" asp-controller="Dashboard" asp-action="Accounts" asp-route-sortOrder="@Model.PremiumSort"
					   asp-route-currentFilter="@Model.CurrentFilter">
						@Html.DisplayNameFor(model => model.Accounts[0].Premium)
					</a>
				</th>
				<th>
					<a class="has-text-@(textColor)" asp-area="" asp-controller="Dashboard" asp-action="Accounts" asp-route-sortOrder="@Model.DateSort"
					   asp-route-currentFilter="@Model.CurrentFilter">
						@Html.DisplayNameFor(model => model.Accounts[0].LastLoginDate)
					</a>
				</th>
				<th></th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (Account account in Model.Accounts)
			{
				<tr>
					<td>
						@Html.DisplayFor(modelItem => account.AccountId)
					</td>
					<td>
						@Html.DisplayFor(modelItem => account.Username)
					</td>
					<td>
						@Html.DisplayFor(modelItem => account.Ap)
					</td>
					<td>
						<span class="icon" style="font-size: 1.25rem;">
							<i class="@("fas fa-" + (account.Premium ? "check" : "times") + " has-text-" + (account.Premium ? "success" : "danger"))"></i>
						</span>
					</td>
					<td>
						@Html.DisplayFor(modelItem => account.LastLoginDate)
					</td>
					<td>
						<a class="button is-small is-info is-outlined" title="Show" asp-area="" asp-controller="Dashboard" asp-action="ShowAccount" asp-route-id="@(account.AccountId)">
							<span class="icon">
								<i class="far fa-eye has-text-@(textColor)"></i>
							</span>
						</a>
					</td>
					<td>
						<a class="button is-small is-info is-outlined" title="Edit" asp-area="" asp-controller="Dashboard" asp-action="EditAccount" asp-route-id="@(account.AccountId)">
							<span class="icon">
								<i class="fas fa-cog has-text-@(textColor)"></i>
							</span>
						</a>
					</td>
				</tr>
			}
		</tbody>
	</table>

	<br />
	@{
		var prevDisabled = !Model.Accounts.HasPreviousPage ? "disabled" : "";
		var nextDisabled = !Model.Accounts.HasNextPage ? "disabled" : "";
	}
	<nav class="pagination is-centered">
		<a asp-area="" asp-controller="Dashboard" asp-action="Accounts"
		   asp-route-sortOrder="@Model.CurrentSort"
		   asp-route-pageIndex="@(Model.Accounts.PageIndex - 1)"
		   asp-route-currentFilter="@Model.CurrentFilter"
		   class="pagination-previous @("has-text-" + textColor + " " + prevDisabled)">
			Previous
		</a>
		<a asp-area="" asp-controller="Dashboard" asp-action="Accounts"
		   asp-route-sortOrder="@Model.CurrentSort"
		   asp-route-pageIndex="@(Model.Accounts.PageIndex + 1)"
		   asp-route-currentFilter="@Model.CurrentFilter"
		   class="pagination-next @("has-text-" + textColor + " " + nextDisabled)">
			Next
		</a>
		<ul class="pagination-list">
			@{
				bool dotted = false;
				for (int i = 1; i <= Model.Accounts.TotalPages; i++)
				{
					<li>
						@if (Model.Accounts.PageIndex == i)
						{
							<a class="pagination-link is-current @("has-text-" + textColor)">@(i)</a>
						}
						else
						{
							int distance = Math.Abs(Model.Accounts.PageIndex - i);

							if (i == 1 || i == Model.Accounts.TotalPages || distance < 2)
							{
								<a class="pagination-link @("has-text-" + textColor)" asp-area="" asp-controller="Dashboard" asp-action="Accounts"
								   asp-route-sortOrder="@Model.CurrentSort"
								   asp-route-pageIndex="@(i)"
								   asp-route-currentFilter="@Model.CurrentFilter">@(i)</a>
							}
							else if (!dotted)
							{

								dotted = true;
								<a class="pagination-ellipsis @("has-text-" + textColor)">&hellip;</a>
							}
						}
					</li>
				}
			}
		</ul>
	</nav>
</div>
